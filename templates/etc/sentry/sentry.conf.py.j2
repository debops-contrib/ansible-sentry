# {{ ansible_managed }}

# This file is just Python, with a touch of Django which means
# you can inherit and tweak settings to your hearts content.
from sentry.conf.server import *

import os.path

CONF_ROOT = os.path.dirname(__file__)

DATABASES = {
    'default': {
        'ENGINE': 'sentry.db.postgres',
        'NAME': '{{ sentry__database_name }}',
        'USER': '{{ sentry__database_user }}',
        'PASSWORD': '{{ sentry__postgresql_user_role.password | d(lookup("password",
            secret + "/postgresql/" + postgresql__delegate_to +
            "/" + (sentry__postgresql_user_role.port | d(postgresql__port)) +
            "/credentials/" + sentry__postgresql_user_role.name | d(sentry__postgresql_user_role.role) + "/password " +
            "length=" + postgresql__password_length)) }}',
        'HOST': '{{ sentry__database_host }}',
        'PORT': '{{ sentry__database_port }}',
        'AUTOCOMMIT': True,
        'ATOMIC_REQUESTS': False,
    }
}

# You should not change this setting after your database has been created
# unless you have altered all schemas first
SENTRY_USE_BIG_INTS = True

# If you're expecting any kind of real traffic on Sentry, we highly recommend
# configuring the CACHES and Redis settings

###########
# General #
###########

# Instruct Sentry that this install intends to be run by a single organization
# and thus various UI optimizations should be enabled.
SENTRY_SINGLE_ORGANIZATION = {{ sentry__config_sentry_single_organization | d(True) | bool }}
DEBUG = {{ sentry__config_debug | d(False) | bool }}

#########
# Cache #
#########

# Sentry currently utilizes two separate mechanisms. While CACHES is not a
# requirement, it will optimize several high throughput patterns.

# If you wish to use memcached, install the dependencies and adjust the config
# as shown:
#
#   pip install python-memcached
#
# CACHES = {
#     'default': {
#         'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
#         'LOCATION': ['127.0.0.1:11211'],
#     }
# }

# A primary cache is required for things such as processing events
SENTRY_CACHE = 'sentry.cache.redis.RedisCache'

#########
# Queue #
#########

# See https://docs.getsentry.com/on-premise/server/queue/ for more
# information on configuring your queue broker and workers. Sentry relies
# on a Python framework called Celery to manage queues.

BROKER_URL = '{{ "redis://:" + sentry__redis_password | d(lookup("password",
            secret + "/redis/clusters/" + ansible_domain +
            "/password length=256 chars=ascii_letters,digits,-_.")) + "@localhost:6379/0" }}'

###############
# Rate Limits #
###############

# Rate limits apply to notification handlers and are enforced per-project
# automatically.

SENTRY_RATELIMITER = 'sentry.ratelimits.redis.RedisRateLimiter'

##################
# Update Buffers #
##################

# Buffers (combined with queueing) act as an intermediate layer between the
# database and the storage API. They will greatly improve efficiency on large
# numbers of the same events being sent to the API in a short amount of time.
# (read: if you send any kind of real data to Sentry, you should enable buffers)

SENTRY_BUFFER = 'sentry.buffer.redis.RedisBuffer'

##########
# Quotas #
##########

# Quotas allow you to rate limit individual projects or the Sentry install as
# a whole.

SENTRY_QUOTAS = 'sentry.quotas.redis.RedisQuota'

########
# TSDB #
########

# The TSDB is used for building charts as well as making things like per-rate
# alerts possible.

SENTRY_TSDB = 'sentry.tsdb.redis.RedisTSDB'

###########
# Digests #
###########

# The digest backend powers notification summaries.

SENTRY_DIGESTS = 'sentry.digests.backends.redis.RedisBackend'

################
# File storage #
################

# Any Django storage backend is compatible with Sentry. For more solutions see
# the django-storages package: https://django-storages.readthedocs.io/en/latest/

SENTRY_FILESTORE = '{{ sentry__config_sentry_filestore }}'
SENTRY_FILESTORE_OPTIONS = {
{% for key in sentry__config_sentry_filestore_options.keys() %}
    '{{ key }}': '{{ sentry__config_sentry_filestore_options[key] }}',
{% endfor %}
}

##############
# Web Server #
##############

# If you're using a reverse SSL proxy, you should enable the X-Forwarded-Proto
# header and uncomment the following settings
SECURE_PROXY_SSL_HEADER = '{{ sentry__config_secure_proxy_ssl_header }}'
SESSION_COOKIE_SECURE = '{{ sentry__config_session_cookie_secure | bool }}'
CSRF_COOKIE_SECURE = '{{ sentry__config_csrf_cookie_secure | bool }}'

# If you're not hosting at the root of your web server,
# you need to uncomment and set it to the path where Sentry is hosted.
# FORCE_SCRIPT_NAME = '/sentry'

SENTRY_WEB_HOST = '{{ sentry__config_sentry_web_host }}'
SENTRY_WEB_PORT = '{{ sentry__config_sentry_web_port }}'
SENTRY_WEB_OPTIONS = {
{% for key in sentry__config_sentry_web_options.keys() %}
    '{{ key }}': '{{ sentry__config_sentry_web_options[key] }}',
{% endfor %}
}
